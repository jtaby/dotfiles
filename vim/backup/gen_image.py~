#!/opt/local/bin/python2.6
from PIL import Image, ImageDraw, ImageFont, ImageColor
import datetime, calendar
import MonthBox

# Global constants
IMAGE_HEIGHT = 2395
IMAGE_WIDTH = 2840

PAGE_MARGIN_TOP = 0
PAGE_MARGIN_BOTTOM = 10
PAGE_MARGIN_LEFT = 5
PAGE_MARGIN_RIGHT = 5

CONTENT_HEADER_HEIGHT = 440
MONTH_NAMES = ['January','February','March','April','May','June','July','August','September','October','November','December']
WEEKDAY_NAMES = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']

NUM_WEEKS = 6
NUM_DAYS_PER_WEEK = 7
# DAY_BOX_WIDTH = 355
DAY_BOX_WIDTH = IMAGE_WIDTH / NUM_DAYS_PER_WEEK
# DAY_BOX_HEIGHT = 300
DAY_BOX_HEIGHT = (IMAGE_HEIGHT - CONTENT_HEADER_HEIGHT) / NUM_WEEKS
DAY_BOX_PADDING = 5


# ------------------------------------------
# Global objects
im = Image.open("us_letter_blank.png")
draw = ImageDraw.Draw(im)
font = ImageFont.truetype("Myriad.otf",60);


# ------------------------------------------
# Fixture data

CALENDARS = ['CSE Scholars','Personal','School Work']
CALENDAR_COLORS = ['#FF0000','#00FF00','#FF9900']

CALENDAR_DATA = {
  2010: {
    2: {
      6: [
        {
          'text': 'This is a test',
          'calendar': 0,
          'starttime': '12:00'
        },
        {
          'text': 'This is another test',
          'calendar': 1,
          'starttime': '2:00'
        }
      ],
      18: [
        {
          'text': 'This is a test',
          'calendar': 0,
          'starttime': '12:00'
        },
        {
          'text': 'This is another test',
          'calendar': 1,
          'starttime': '2:00'
        }
      ],
      23: [
        {
          'text': 'This is a test',
          'calendar': 2,
          'starttime': '12:00'
        },
        {
          'text': 'This is another test',
          'calendar': 1,
          'starttime': '2:00'
        }
      ]
    }
  }
}  


# ------------------------------------------
# Drawing the header
cur_date = datetime.datetime.now()
month = cur_date.month
year  = cur_date.year

font = ImageFont.truetype("LucidaSansStd-Bold.otf",90);
draw.text((PAGE_MARGIN_LEFT,PAGE_MARGIN_TOP),MONTH_NAMES[month - 1]+' '+str(year),font=font, fill=1)


# ------------------------------------------
# Drawing the calendar headers
font = ImageFont.truetype("LucidaSansStd.otf",30);
for i in range(len(CALENDARS)):
  top_offset = PAGE_MARGIN_TOP + 170 + (45 * i)
  left_offset = PAGE_MARGIN_LEFT + 50
  draw.text((left_offset,top_offset),CALENDARS[i],font=font, fill=1)
  draw.rectangle((PAGE_MARGIN_LEFT,top_offset,PAGE_MARGIN_LEFT+40,top_offset+20),fill=CALENDAR_COLORS[i % len(CALENDAR_COLORS)])


# ------------------------------------------
# Drawing the calendar canvas

day_range = calendar.monthrange(year,month) 

# Do I need to figure out the information for the previous month?
prev_month_day_range = (0,0)
prev_month_days_to_show = 0

if(day_range[0] != 6):
  if(month == 1):
    new_month = 12
    new_year = year - 1
  elif(month == 12):
    new_month = 1
    new_year = year + 1
  else:
    new_month = month-1
    new_year = year

  prev_month_day_range = calendar.monthrange(new_year,new_month)
  prev_month_days_to_show = ((day_range[0] + 1) % 7)

# Don't show a full row of the next month
if(((NUM_WEEKS * NUM_DAYS_PER_WEEK) - (prev_month_days_to_show + day_range[1])) > 6):
  PAGE_MARGIN_BOTTOM = 0
  NUM_WEEKS = 5
  DAY_BOX_HEIGHT = (IMAGE_HEIGHT - CONTENT_HEADER_HEIGHT) / NUM_WEEKS

number_of_days_in_month = day_range[1]
rowday_of_first = day_range[0]

# Draw the day names
for day in range(NUM_DAYS_PER_WEEK):

  color = "#000000"  
  text_size = draw.textsize(WEEKDAY_NAMES[day],font=font)

  centering_offset = (DAY_BOX_WIDTH - text_size[0]) / 2

  left_offset = PAGE_MARGIN_LEFT + (DAY_BOX_WIDTH * day) - centering_offset
  top_offset = PAGE_MARGIN_TOP + 390 + (DAY_BOX_HEIGHT * 0)

  draw.text((left_offset + DAY_BOX_WIDTH - text_size[0],top_offset + DAY_BOX_PADDING),WEEKDAY_NAMES[day],font=font, fill=color)

# Draw the main contents of the calendar
for row in range(NUM_WEEKS):
  for col in range(NUM_DAYS_PER_WEEK):

    box_in_grid = (NUM_DAYS_PER_WEEK * row) + (col+1)

    top_offset = PAGE_MARGIN_TOP + CONTENT_HEADER_HEIGHT + (DAY_BOX_HEIGHT * row)
    left_offset = PAGE_MARGIN_LEFT + (DAY_BOX_WIDTH * col)

    # We're in the previous month's range
    if(box_in_grid <= day_range[0] + 1 and (day_range[0] + 1) % 7 != 0):
      box_in_grid = col
      greyed_out = True
      color = "#b5b5b5"  
      day_number = prev_month_day_range[1] - (prev_month_days_to_show - (box_in_grid + 1)) 

      draw.rectangle((left_offset,top_offset,left_offset + DAY_BOX_WIDTH,top_offset + DAY_BOX_HEIGHT),outline=color)
    # We're in the next month's range
    elif(box_in_grid > (number_of_days_in_month + prev_month_days_to_show)):
      greyed_out = True
      color = "#b5b5b5"  
      day_number = (box_in_grid - (prev_month_days_to_show + day_range[1]))
      left_offset = PAGE_MARGIN_LEFT + (DAY_BOX_WIDTH * col-1)

      draw.line((left_offset,top_offset,left_offset, top_offset + DAY_BOX_HEIGHT),fill=color)
    # We're in the current month
    else: 
      greyed_out = False
      color = "#000000"  
      day_number = box_in_grid - prev_month_days_to_show

      draw.rectangle((left_offset,top_offset,left_offset + DAY_BOX_WIDTH,top_offset + DAY_BOX_HEIGHT),outline=color)

    text_size = draw.textsize(str(day_number),font=font)
    draw.text((left_offset + DAY_BOX_WIDTH - text_size[0] - DAY_BOX_PADDING,top_offset + DAY_BOX_PADDING),str(day_number),font=font, fill=color)

    if(CALENDAR_DATA[year] and CALENDAR_DATA[year][month] and CALENDAR_DATA[year][month][day]):
      day_events = CALENDAR_DATA[year][month][day]
    else: 
      continue

    box_obj = MonthBox.MonthViewBox(draw,top_offset,left_offset,DAY_BOX_HEIGHT,DAY_BOX_WIDTH)
#    box_obj.drawEventInfo(day_events,color,font)


draw.rectangle((PAGE_MARGIN_LEFT, #left edge \
                PAGE_MARGIN_TOP+CONTENT_HEADER_HEIGHT, #top edge \
                (DAY_BOX_WIDTH * NUM_DAYS_PER_WEEK)+PAGE_MARGIN_LEFT, #right edge \
                PAGE_MARGIN_TOP+CONTENT_HEADER_HEIGHT + (DAY_BOX_HEIGHT * NUM_WEEKS)), #bottom edge \
                outline=1)

del draw
del font

im.save("generated_image.png")
# im.rotate(90).save("generated_image.png")
